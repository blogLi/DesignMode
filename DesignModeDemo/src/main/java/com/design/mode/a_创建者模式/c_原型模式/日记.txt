浅拷贝:
	假如 Citation(含有非基本数据类型) 实现了 Cloneable , 重写了 clone()
	那么 Citation citation=(Citation) citation.clone(); 就是一个浅拷贝
	浅拷贝特点:
	 1.对象本身是新对象
	 2.对象里面的基本数据会复制, 基本数据不存在引用；特殊的String类型，有深拷贝表现；
        String 存在于堆内存、常量池；这种比较特殊, 本身没有实现 Cloneable, 传递是引用地址；
        由本身的final性, 每次赋值都是一个新的引用地址，原对象的引用和副本的引用互不影响。
        因此String就和基本数据类型一样,表现出了"深拷贝"特性.
	 3.对象里面的复杂数据类型会进行浅拷贝, 指向的同一个引用地址

深拷贝:
	所有属性都是一份拷贝, 跟原数据不会有任何耦合(不存在引用共享)

序列化深拷贝: 不需要递归让所有对象实现cloneable接口, 方便简洁

创建对象的 4 种方法如下
1、使用 new 关键字
2、反射机制
3、实现 Cloneable 接口，使用 clone 方法创建对象
4、序列化和反序列化
以上4种方式，都可以创建一个Java对象，实现机制上有如下区别

方式1和方式2中，都明确地显式地调用了对象的构造函数。
方式3中，是对已经的对象，在内存上拷贝了一个影印，并不会调用对象的构造函数。
方式4中，对对象进行序列化，转化为了一个文件流，再通过反序列化生成一个对象，也不会调用构造函数。
